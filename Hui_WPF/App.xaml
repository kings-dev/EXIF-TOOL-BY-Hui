<Application x:Class="Hui_WPF.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:Hui_WPF"
             xmlns:vm="clr-namespace:Hui_WPF.ViewModels"
             xmlns:views="clr-namespace:Hui_WPF.Views"
    xmlns:converters="clr-namespace:Hui_WPF.Converters"
             StartupUri="MainWindow.xaml">

    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!-- Add theme files if you have them -->
                <!-- <ResourceDictionary Source="/Themes/Light.xaml"/> -->

            </ResourceDictionary.MergedDictionaries>

 
            <converters:EnumToBooleanConverter x:Key="EnumToBooleanConverter"/>
            <converters:InverseBooleanConverter x:Key="InverseBooleanConverter"/> <!-- Ensure this line exists and is correct -->
            <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
            <converters:PanDirectionToStringConverter x:Key="PanDirectionConverter"/>
            <converters:ProgressToBrushConverter x:Key="ProgressToBrushConverter"/>
            <converters:NullToBooleanConverter x:Key="NullToBooleanConverter" TrueIfNotNull="True"/>
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
            <converters:ProgressToWidthMultiConverter x:Key="ProgressToWidthMultiConverter"/>
            <!-- Placeholder for ProgressToWidthConverter -->

            <DataTemplate DataType="{x:Type vm:CreateDirectoryViewModel}">
                <views:CreateDirectoryView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type vm:DirectRenameViewModel}">
                <views:DirectRenameView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type vm:ExifRemoveViewModel}">
                <views:ExifRemoveView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type vm:ExifWriteViewModel}">
                <views:ExifWriteView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type vm:GenerateVideoViewModel}">
                <views:GenerateVideoView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type vm:GenerateBurstViewModel}">
                <views:GenerateBurstView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type vm:GenerateAnimationViewModel}">
                <views:GenerateAnimationView />
            </DataTemplate>

            <!-- 如果您有一个 PlaceholderViewModel 用于显示默认消息 -->
            <DataTemplate DataType="{x:Type vm:PlaceholderViewModel}">
                <TextBlock Text="{Binding Message}" FontSize="16" Foreground="Gray" 
                       HorizontalAlignment="Center" VerticalAlignment="Center" Margin="20"
                       TextWrapping="Wrap"/>
            </DataTemplate>


            <!-- Shared Basic Resources -->
            <Thickness x:Key="ControlMargin">0,3,0,3</Thickness>
            <Thickness x:Key="GroupMargin">5</Thickness>
            <Thickness x:Key="InnerGroupPadding">10,8</Thickness>
            <CornerRadius x:Key="ControlCornerRadius">3</CornerRadius>
            <CornerRadius x:Key="ButtonCornerRadius">3</CornerRadius>


            <!-- Shared Colors -->
            <SolidColorBrush x:Key="AccentBrush" Color="#FF0078D4"/>
            <SolidColorBrush x:Key="SubtleBorderBrush" Color="#FFD0D0D0"/>
            <SolidColorBrush x:Key="LighterBackgroundBrush" Color="#FFF5F5F5"/>
            <SolidColorBrush x:Key="NavHoverBackgroundBrush" Color="#FFE6F2FA"/>
            <SolidColorBrush x:Key="NavSelectedBackgroundBrush" Color="#FFCDE6F7"/>
            <SolidColorBrush x:Key="SeparatorForegroundBrush" Color="#FF606060"/>
            <SolidColorBrush x:Key="ErrorForegroundBrush" Color="#FFDC3545"/>
            <SolidColorBrush x:Key="WarningForegroundBrush" Color="#FFFFC107"/>
            <SolidColorBrush x:Key="SuccessForegroundBrush" Color="#FF28A745"/>


            <!-- Base Button Style (Global) -->
            <Style x:Key="BaseButtonStyle" TargetType="Button">
                <Setter Property="Padding" Value="10,5"/>
                <Setter Property="Margin" Value="5"/>
                <Setter Property="MinWidth" Value="80"/>
                <Setter Property="MinHeight" Value="28"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Background" Value="#FFE9E9E9"/>
                <Setter Property="BorderBrush" Value="{StaticResource SubtleBorderBrush}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="border" Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{StaticResource ControlCornerRadius}"
                                    SnapsToDevicePixels="True">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  Margin="{TemplateBinding Padding}"
                                                  RecognizesAccessKey="True"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="#FFBEE6FD"/>
                                    <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource AccentBrush}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="#FFC4E5F6"/>
                                    <Setter TargetName="border" Property="BorderBrush" Value="#FF0078A0"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="border" Property="Opacity" Value="0.6"/>
                                    <Setter Property="Cursor" Value="Arrow"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Specific Button Styles Based on Base (Global) -->
            <Style x:Key="StartStopButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
                <Setter Property="Padding" Value="10,5"/>
                <Setter Property="Height" Value="40"/>
                <Setter Property="Width" Value="140"/>
                <Setter Property="FontSize" Value="15"/>
                <Setter Property="FontWeight" Value="Bold"/>
            </Style>
            <Style x:Key="StartGenerationButtonStyle" TargetType="Button" BasedOn="{StaticResource StartStopButtonStyle}">
                <Setter Property="Background" Value="#FF28A745"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="BorderBrush" Value="#FF218838"/>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="#FF218838"/>
                        <Setter Property="BorderBrush" Value="#FF1E7E34"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background" Value="#FF1E7E34"/>
                        <Setter Property="BorderBrush" Value="#FF1A6C2E"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="CancelGenerationButtonStyle" TargetType="Button" BasedOn="{StaticResource StartStopButtonStyle}">
                <Setter Property="Background" Value="#FFDC3545"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="BorderBrush" Value="#FFC82333"/>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="#FFC82333"/>
                        <Setter Property="BorderBrush" Value="#FFB81D2A"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background" Value="#FFB81D2A"/>
                        <Setter Property="BorderBrush" Value="#FF9C1A23"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!-- Navigation ListBoxItem Style (Global) -->
            <Style x:Key="BaseNavListBoxItemStyle" TargetType="ListBoxItem">
                <Setter Property="Padding" Value="12,8"/>
                <Setter Property="Margin" Value="2,1"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="FontSize" Value="13"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ListBoxItem">
                            <Border Name="Bd"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Background="{TemplateBinding Background}"
                                    Padding="{TemplateBinding Padding}"
                                    SnapsToDevicePixels="true"
                                    CornerRadius="3">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter TargetName="Bd" Property="Background" Value="{StaticResource NavHoverBackgroundBrush}"/>
                                </Trigger>
                                <Trigger Property="IsSelected" Value="true">
                                    <Setter TargetName="Bd" Property="Background" Value="{StaticResource NavSelectedBackgroundBrush}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                    <Setter Property="FontWeight" Value="SemiBold"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{StaticResource SeparatorForegroundBrush}"/>
                                    <Setter Property="Padding" Value="10,8,10,3"/>
                                    <Setter Property="Margin" Value="2,8,2,2"/>
                                    <Setter Property="FontSize" Value="11"/>
                                    <Setter Property="FontWeight" Value="Bold"/>
                                    <Setter Property="Focusable" Value="False"/>
                                    <Setter TargetName="Bd" Property="Background" Value="Transparent"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- General Style for GroupBox (Global) -->
            <Style x:Key="BaseGroupBoxStyle" TargetType="GroupBox">
                <Setter Property="Padding" Value="{StaticResource InnerGroupPadding}"/>
                <Setter Property="Margin" Value="{StaticResource GroupMargin}"/>
                <Setter Property="BorderBrush" Value="{StaticResource SubtleBorderBrush}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Background" Value="{StaticResource LighterBackgroundBrush}"/>
                <Setter Property="HeaderTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <TextBlock Text="{Binding}" FontWeight="SemiBold" FontSize="12" Margin="0,0,0,2"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Styles for Drag & Drop Area (Global, used in MainWindow) -->
            <Style x:Key="BaseDropBorderStyle" TargetType="Border">
                <Setter Property="BorderBrush" Value="Gray"/>
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="CornerRadius" Value="5"/>
                <Setter Property="Background" Value="#FFE8E8E8"/>
                <Setter Property="Margin" Value="5"/>
                <Setter Property="AllowDrop" Value="True"/>
            </Style>
            <Style x:Key="BaseDropTextStyle" TargetType="TextBlock">
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="TextAlignment" Value="Center"/>
                <Setter Property="Foreground" Value="DimGray"/>
                <Setter Property="IsHitTestVisible" Value="False"/>
                <Setter Property="FontSize" Value="16"/>
            </Style>

        </ResourceDictionary>
    </Application.Resources>
</Application>